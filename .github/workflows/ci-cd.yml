name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore
        working-directory: backend

      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: backend

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults
        working-directory: backend

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/TestResults/*.trx

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          if [ $? -ne 0 ]; then
            echo "npm ci failed, attempting to clear cache and retry"
            npm cache clean --force
            npm ci --prefer-offline --no-audit
          fi
        working-directory: frontend

      - name: ESLint
        run: |
          echo "Running ESLint with failure detection..."
          npm run lint -- --format=compact --max-warnings=0
          if [ $? -ne 0 ]; then
            echo "ESLint found errors or warnings that exceed the threshold"
            exit 1
          fi
        working-directory: frontend

      - name: TypeScript type check
        run: |
          echo "Running TypeScript type checking..."
          npx tsc --noEmit --pretty
          if [ $? -ne 0 ]; then
            echo "TypeScript type checking failed"
            exit 1
          fi
        working-directory: frontend

      - name: Run tests with coverage
        run: |
          echo "Running tests with CI-specific settings..."
          npm run test -- --run --reporter=verbose --exclude="**/PresetManager.test.tsx"
        working-directory: frontend
        env:
          CI: true
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: frontend/test-results.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: |
            frontend/coverage/
            frontend/coverage/lcov.info
            frontend/coverage/coverage-final.json

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-coverage-summary
          path: frontend/coverage/coverage-summary.json

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Placeholder for build and push
        run: echo "Build and push job - to be implemented in task 6"

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Placeholder for deployment
        run: echo "Deploy job - to be implemented in task 9"